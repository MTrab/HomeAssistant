"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _collection = require("./collection");

var _collection2 = _interopRequireDefault(_collection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Registry class to store any kind of information in domains.
*/

var DomainMap = function () {

  /**
  * Construct registry
  *
  * @param variables with following keys:
  *   - boolean strictKeyMode, defaults to true
  */

  function DomainMap(variables) {
    _classCallCheck(this, DomainMap);

    if (variables === undefined) variables = {};
    // Init
    this._data = {};

    // Strict mode
    this._strictKeyMode = variables.hasOwnProperty('strictKeyMode') && !variables.strictKeyMode ? false : true;
  }

  /**
  * Set key to registery
  *
  * @param domain
  * @param key
  * @param value
  */


  _createClass(DomainMap, [{
    key: "set",
    value: function set(domain, key, value) {
      if (!this._data.hasOwnProperty(domain)) this._data[domain] = new _collection2.default({ strictKeyMode: this._strictKeyMode });
      this._data[domain].set(key, value);
    }

    /**
    * Get key
    * 
    * @param domain
    * @param key
    * @param default_value
    *   Defaults to false
    */

  }, {
    key: "get",
    value: function get(domain, key, default_value) {
      if (default_value === undefined) default_value = false;
      if (!this._data.hasOwnProperty(domain)) return default_value;
      return this._data[domain].get(key, default_value);
    }

    /**
    * Delete key from domain.
    *
    * @param domain
    * @param key
    */

  }, {
    key: "delete",
    value: function _delete(domain, key) {
      if (!this._data.hasOwnProperty(domain)) return;
      this._data[domain].delete(key);
    }

    /**
    * Clear domain
    *
    * @param domain name
    */

  }, {
    key: "clearDomain",
    value: function clearDomain(domain) {
      if (!this._data.hasOwnProperty(domain)) return;
      this._data[domain].clearMap();
    }

    /**
    * Get domain key list.
    *
    * @param domain
    * @param defaultValue
    * @return domain key list
    */

  }, {
    key: "getDomainKeysList",
    value: function getDomainKeysList(domain, defaultValue) {
      if (defaultValue == undefined) defaultValue = null;
      return this._data.hasOwnProperty(domain) ? this._data[domain].getKeysList() : defaultValue;
    }

    /**
    * Get whole domain collection
    *
    * @param domain
    * @param defaultValue
    * @return domain collection or null
    */

  }, {
    key: "getDomain",
    value: function getDomain(domain, defaultValue) {
      if (defaultValue == undefined) defaultValue = null;
      return this._data.hasOwnProperty(domain) ? this._data[domain] : defaultValue;
    }
  }]);

  return DomainMap;
}();

exports.default = DomainMap;