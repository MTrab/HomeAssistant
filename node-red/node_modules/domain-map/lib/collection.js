'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Collection class to store list of keyed items.
* We extend basic ES6 Map with support to handle "weak object keys".
*/

var Collection = function () {

  /**
  * Construct registry
  *
  * @param variables with following keys:
  *   - boolean strictKeyMode, defaults to true
  */

  function Collection(variables) {
    _classCallCheck(this, Collection);

    if (variables === undefined) variables = {};
    this._data = new Map();
    this._strictKeyMode = variables.hasOwnProperty('strictKeyMode') && !variables.strictKeyMode ? false : true;
  }

  /**
  * Set key to collection
  *
  * @param key
  * @param value
  */


  _createClass(Collection, [{
    key: 'set',
    value: function set(key, value) {
      var mapKey = this.buildFormattedKey(key);
      this._data.set(this.buildFormattedKey(mapKey), value);
    }

    /**
    * Get key
    * 
    * @param key
    * @param default_value
    *   Defaults to false
    */

  }, {
    key: 'get',
    value: function get(key, default_value) {
      if (default_value === undefined) default_value = false;
      var mapKey = this.buildFormattedKey(key);
      return this._data.has(mapKey) ? this._data.get(mapKey) : default_value;
    }

    /**
    * Check if key exists.
    *
    * @param key
    * @return boolean key exits
    */

  }, {
    key: 'has',
    value: function has(key) {
      return this._data.has(this.buildFormattedKey(key));
    }

    /**
    * Delete key from collection.
    *
    * @param key
    */

  }, {
    key: 'delete',
    value: function _delete(key) {
      this._data.delete(this.buildFormattedKey(key));
    }

    /**
    * Iterate over map key values
    *
    * @param callback.
    */

  }, {
    key: 'forEach',
    value: function forEach(callback) {
      // In case of strict mode, let's use normal map behaviour
      if (this._strictKeyMode) return this._data.forEach(callback);

      // If this is not strict mode, keys are stringified...
      this._data.forEach(function (value, stringifiedKey) {
        callback(value, JSON.parse(stringifiedKey));
      });
    }

    /**
    * Get keys list.
    *
    * @return array of keys
    */

  }, {
    key: 'getKeysList',
    value: function getKeysList() {
      var keys = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._data.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          if (this._strictKeyMode) keys.push(key);else keys.push(JSON.parse(key));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return keys;
    }

    /**
    * Clear collection data.
    */

  }, {
    key: 'clearMap',
    value: function clearMap() {
      this._data.clear();
    }

    /**
    * Get map
    *
    * @return domain map
    */

  }, {
    key: 'getMap',
    value: function getMap() {
      return this._data;
    }

    /**
    * Method returns formatted key used with registry map. Format depends on
    * "key mode" assigned when constructing registry. If key mode is strict,
    * map will allways be keyed directly with objects. This means that only same
    * object will return same item. For example following keys are not same:
    *
    * let key1 = {value: "abc"},
    *     key2 = {value: "abc"}
    *
    * With strict mode disabled we are considering all objects with same content
    * as same key.
    *
    * @param key
    *   Given key
    * @return keyValue
    */

  }, {
    key: 'buildFormattedKey',
    value: function buildFormattedKey(key) {
      return (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object' && !this._strictKeyMode ? JSON.stringify(key) : key;
    }
  }]);

  return Collection;
}();

exports.default = Collection;